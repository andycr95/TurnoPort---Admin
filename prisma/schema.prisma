generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model clients {
  id        Int      @id @default(autoincrement())
  nit       String?  @db.VarChar(255)
  name      String?  @db.VarChar(255)
  email     String?  @db.VarChar(255)
  phone     String?  @db.VarChar(255)
  status    String?  @default("1") @db.VarChar(255)
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  shifts    shifts[]
}

model closeDays {
  id          Int              @id @default(autoincrement())
  status      closeDays_status @default(true)
  description String?          @db.Text
  date        DateTime         @db.Date
  createdAt   DateTime         @default(now()) @db.Timestamp(0)
  updatedAt   DateTime         @default(now()) @db.Timestamp(0)
}

model companies {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  status    String?  @default("1") @db.VarChar(255)
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  users     users[]
}

model containerTypes {
  id          Int          @id @default(autoincrement())
  code        String?      @db.VarChar(255)
  description String?      @db.VarChar(255)
  status      String?      @default("1") @db.VarChar(255)
  createdAt   DateTime     @db.DateTime(0)
  updatedAt   DateTime     @db.DateTime(0)
  containers  containers[]
}

model containerYards {
  id          Int      @id @default(autoincrement())
  code        String?  @db.VarChar(255)
  description String?  @db.VarChar(255)
  status      String?  @default("1") @db.VarChar(255)
  createdAt   DateTime @db.DateTime(0)
  updatedAt   DateTime @db.DateTime(0)
  shifts      shifts[]
}

model containers {
  id              Int             @id @default(autoincrement())
  code            String?         @db.VarChar(255)
  containerTypeId Int?
  shiftId         Int?
  status          String?         @default("1") @db.VarChar(255)
  createdAt       DateTime        @db.DateTime(0)
  updatedAt       DateTime        @db.DateTime(0)
  containerTypes  containerTypes? @relation(fields: [containerTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "containers_ibfk_1")
  shifts          shifts?         @relation(fields: [shiftId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "containers_ibfk_2")

  @@index([containerTypeId], map: "containerTypeId")
  @@index([shiftId], map: "shiftId")
}

model drivers {
  id             Int      @id @default(autoincrement())
  name           String?  @db.VarChar(255)
  phone          String?  @db.VarChar(255)
  vehicle_plate  String?  @db.VarChar(255)
  type           String?  @db.VarChar(255)
  email          String?  @db.VarChar(255)
  status         String?  @default("1") @db.VarChar(255)
  createdAt      DateTime @db.DateTime(0)
  updatedAt      DateTime @db.DateTime(0)
  identification String?  @db.VarChar(255)
  shifts         shifts[]
}

model moneyBoxes {
  id          Int      @id @default(autoincrement())
  goblalMoney Int?
  current     Int?
  end         Int?
  status      String?  @default("1") @db.VarChar(255)
  createdAt   DateTime @db.DateTime(0)
  updatedAt   DateTime @db.DateTime(0)
}

model roles {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  status    String?  @default("1") @db.VarChar(255)
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  users     users[]
}

model sequelizemeta {
  name String @id @unique(map: "name") @db.VarChar(255)
}

model shiftClasses {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  price     String?  @db.VarChar(255)
  status    String?  @default("1") @db.VarChar(255)
  createdAt DateTime @db.DateTime(0)
  updatedAt DateTime @db.DateTime(0)
  shifts    shifts[]
}

model shifts {
  id              Int             @id @default(autoincrement())
  date            DateTime?       @db.DateTime(0)
  clientId        Int?
  driverId        Int?
  transLineId     Int?
  userId          Int?
  shiftClassId    Int?
  containerYardId Int?
  closeDayId      Int
  price           Int?
  dayShift        Int?
  globalShift     Int?
  obvs            String?         @db.VarChar(255)
  pdf             String?         @db.VarChar(500)
  createdAt       DateTime        @db.DateTime(0)
  updatedAt       DateTime        @db.DateTime(0)
  status          String?         @default("1") @db.VarChar(255)
  containers      containers[]
  clients         clients?        @relation(fields: [clientId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "shifts_ibfk_1")
  drivers         drivers?        @relation(fields: [driverId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shifts_ibfk_2")
  transLines      transLines?     @relation(fields: [transLineId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shifts_ibfk_3")
  users           users?          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shifts_ibfk_4")
  shiftClasses    shiftClasses?   @relation(fields: [shiftClassId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shifts_ibfk_5")
  containerYards  containerYards? @relation(fields: [containerYardId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "shifts_ibfk_6")

  @@index([clientId], map: "clientId")
  @@index([containerYardId], map: "containerYardId")
  @@index([driverId], map: "driverId")
  @@index([shiftClassId], map: "shiftClassId")
  @@index([transLineId], map: "transLineId")
  @@index([userId], map: "userId")
}

model transLines {
  id          Int      @id @default(autoincrement())
  code        String?  @db.VarChar(255)
  description String?  @db.VarChar(255)
  status      String?  @default("1") @db.VarChar(255)
  createdAt   DateTime @db.DateTime(0)
  updatedAt   DateTime @db.DateTime(0)
  shifts      shifts[]
}

model users {
  id             Int        @id @default(autoincrement())
  identification String     @db.VarChar(255)
  name           String     @db.VarChar(255)
  login          String?     @unique(map: "login") @db.VarChar(255)
  password       String     @db.VarChar(255)
  email          String     @db.VarChar(255)
  companyId      Int?
  roleId         Int?
  type           Int?
  phone          String?    @db.VarChar(255)
  status         String?    @default("1") @db.VarChar(255)
  createdAt      DateTime   @db.DateTime(0)
  updatedAt      DateTime   @db.DateTime(0)
  shifts         shifts[]
  companies      companies? @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")
  roles          roles?     @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_2")

  @@index([companyId], map: "companyId")
  @@index([roleId], map: "roleId")
}

enum closeDays_status {
  true
  false
}
